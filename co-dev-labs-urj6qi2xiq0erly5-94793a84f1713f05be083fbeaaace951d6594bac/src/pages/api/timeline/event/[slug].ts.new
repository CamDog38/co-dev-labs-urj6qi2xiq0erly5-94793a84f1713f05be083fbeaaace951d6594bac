import { NextApiRequest, NextApiResponse } from "next"
import prisma from "@/lib/prisma"
import { createClient } from "@/util/supabase/api"

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { slug } = req.query

  if (req.method !== "GET") {
    return res.status(405).json({ error: "Method not allowed" })
  }

  try {
    // First find the event by ID (we'll use ID for now, can be changed to slug later)
    const event = await prisma.event.findFirst({
      where: { 
        id: String(slug)
      },
      include: {
        timeline: {
          include: {
            posts: {
              include: {
                author: {
                  select: {
                    username: true,
                  }
                }
              },
              orderBy: {
                createdAt: "desc"
              }
            }
          }
        }
      }
    })

    if (!event) {
      return res.status(404).json({ error: "Event not found" })
    }

    const timeline = event.timeline

    if (!timeline) {
      return res.status(404).json({ error: "Timeline not found" })
    }

    // Check if timeline is active
    if (!timeline.isActive) {
      return res.status(403).json({ error: "Timeline is not active" })
    }

    // For authenticated users, we need to check their permissions
    const supabase = createClient(req, res)
    const { data: { user } } = await supabase.auth.getUser()

    // If timeline is not public and user is not authenticated
    if (!timeline.allowPublicViewing && !user) {
      return res.status(403).json({ error: "Authentication required" })
    }

    // If user is not the event creator and timeline is not public
    if (!timeline.allowPublicViewing && user && user.id !== event.userId) {
      return res.status(403).json({ error: "You don't have access to this timeline" })
    }

    // Filter posts based on approval status if user is not the event creator
    const filteredPosts = timeline.posts.filter(post => 
      post.isApproved || (user && event.userId === user.id)
    )

    return res.status(200).json({
      ...timeline,
      event: {
        name: event.name,
        description: event.description,
        userId: event.userId
      },
      posts: filteredPosts
    })

  } catch (error) {
    console.error("Error fetching timeline:", error)
    return res.status(500).json({ error: "Failed to fetch timeline" })
  }
}